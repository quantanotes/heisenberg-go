// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.32
// source: protocol.proto

package pb

import (
	context "context"
	errors "errors"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_protocol_proto struct{}

func (drpcEncoding_File_protocol_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_protocol_proto) MarshalAppend(buf []byte, msg drpc.Message) ([]byte, error) {
	return proto.MarshalOptions{}.MarshalAppend(buf, msg.(proto.Message))
}

func (drpcEncoding_File_protocol_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_protocol_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_protocol_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCServiceClient interface {
	DRPCConn() drpc.Conn

	Ping(ctx context.Context, in *Empty) (*Pong, error)
	Connect(ctx context.Context, in *Connection) (*Empty, error)
	AddShard(ctx context.Context, in *Shard) (*Empty, error)
	CreateCollection(ctx context.Context, in *Collection) (*Empty, error)
	Get(ctx context.Context, in *Key) (*Pair, error)
	Put(ctx context.Context, in *Item) (*Empty, error)
	Delete(ctx context.Context, in *Key) (*Empty, error)
}

type drpcServiceClient struct {
	cc drpc.Conn
}

func NewDRPCServiceClient(cc drpc.Conn) DRPCServiceClient {
	return &drpcServiceClient{cc}
}

func (c *drpcServiceClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcServiceClient) Ping(ctx context.Context, in *Empty) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/pb.Service/Ping", drpcEncoding_File_protocol_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcServiceClient) Connect(ctx context.Context, in *Connection) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.Service/Connect", drpcEncoding_File_protocol_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcServiceClient) AddShard(ctx context.Context, in *Shard) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.Service/AddShard", drpcEncoding_File_protocol_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcServiceClient) CreateCollection(ctx context.Context, in *Collection) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.Service/CreateCollection", drpcEncoding_File_protocol_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcServiceClient) Get(ctx context.Context, in *Key) (*Pair, error) {
	out := new(Pair)
	err := c.cc.Invoke(ctx, "/pb.Service/Get", drpcEncoding_File_protocol_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcServiceClient) Put(ctx context.Context, in *Item) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.Service/Put", drpcEncoding_File_protocol_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcServiceClient) Delete(ctx context.Context, in *Key) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.Service/Delete", drpcEncoding_File_protocol_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCServiceServer interface {
	Ping(context.Context, *Empty) (*Pong, error)
	Connect(context.Context, *Connection) (*Empty, error)
	AddShard(context.Context, *Shard) (*Empty, error)
	CreateCollection(context.Context, *Collection) (*Empty, error)
	Get(context.Context, *Key) (*Pair, error)
	Put(context.Context, *Item) (*Empty, error)
	Delete(context.Context, *Key) (*Empty, error)
}

type DRPCServiceUnimplementedServer struct{}

func (s *DRPCServiceUnimplementedServer) Ping(context.Context, *Empty) (*Pong, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCServiceUnimplementedServer) Connect(context.Context, *Connection) (*Empty, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCServiceUnimplementedServer) AddShard(context.Context, *Shard) (*Empty, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCServiceUnimplementedServer) CreateCollection(context.Context, *Collection) (*Empty, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCServiceUnimplementedServer) Get(context.Context, *Key) (*Pair, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCServiceUnimplementedServer) Put(context.Context, *Item) (*Empty, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCServiceUnimplementedServer) Delete(context.Context, *Key) (*Empty, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCServiceDescription struct{}

func (DRPCServiceDescription) NumMethods() int { return 7 }

func (DRPCServiceDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/pb.Service/Ping", drpcEncoding_File_protocol_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCServiceServer).
					Ping(
						ctx,
						in1.(*Empty),
					)
			}, DRPCServiceServer.Ping, true
	case 1:
		return "/pb.Service/Connect", drpcEncoding_File_protocol_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCServiceServer).
					Connect(
						ctx,
						in1.(*Connection),
					)
			}, DRPCServiceServer.Connect, true
	case 2:
		return "/pb.Service/AddShard", drpcEncoding_File_protocol_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCServiceServer).
					AddShard(
						ctx,
						in1.(*Shard),
					)
			}, DRPCServiceServer.AddShard, true
	case 3:
		return "/pb.Service/CreateCollection", drpcEncoding_File_protocol_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCServiceServer).
					CreateCollection(
						ctx,
						in1.(*Collection),
					)
			}, DRPCServiceServer.CreateCollection, true
	case 4:
		return "/pb.Service/Get", drpcEncoding_File_protocol_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCServiceServer).
					Get(
						ctx,
						in1.(*Key),
					)
			}, DRPCServiceServer.Get, true
	case 5:
		return "/pb.Service/Put", drpcEncoding_File_protocol_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCServiceServer).
					Put(
						ctx,
						in1.(*Item),
					)
			}, DRPCServiceServer.Put, true
	case 6:
		return "/pb.Service/Delete", drpcEncoding_File_protocol_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCServiceServer).
					Delete(
						ctx,
						in1.(*Key),
					)
			}, DRPCServiceServer.Delete, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterService(mux drpc.Mux, impl DRPCServiceServer) error {
	return mux.Register(impl, DRPCServiceDescription{})
}

type DRPCService_PingStream interface {
	drpc.Stream
	SendAndClose(*Pong) error
}

type drpcService_PingStream struct {
	drpc.Stream
}

func (x *drpcService_PingStream) SendAndClose(m *Pong) error {
	if err := x.MsgSend(m, drpcEncoding_File_protocol_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCService_ConnectStream interface {
	drpc.Stream
	SendAndClose(*Empty) error
}

type drpcService_ConnectStream struct {
	drpc.Stream
}

func (x *drpcService_ConnectStream) SendAndClose(m *Empty) error {
	if err := x.MsgSend(m, drpcEncoding_File_protocol_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCService_AddShardStream interface {
	drpc.Stream
	SendAndClose(*Empty) error
}

type drpcService_AddShardStream struct {
	drpc.Stream
}

func (x *drpcService_AddShardStream) SendAndClose(m *Empty) error {
	if err := x.MsgSend(m, drpcEncoding_File_protocol_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCService_CreateCollectionStream interface {
	drpc.Stream
	SendAndClose(*Empty) error
}

type drpcService_CreateCollectionStream struct {
	drpc.Stream
}

func (x *drpcService_CreateCollectionStream) SendAndClose(m *Empty) error {
	if err := x.MsgSend(m, drpcEncoding_File_protocol_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCService_GetStream interface {
	drpc.Stream
	SendAndClose(*Pair) error
}

type drpcService_GetStream struct {
	drpc.Stream
}

func (x *drpcService_GetStream) SendAndClose(m *Pair) error {
	if err := x.MsgSend(m, drpcEncoding_File_protocol_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCService_PutStream interface {
	drpc.Stream
	SendAndClose(*Empty) error
}

type drpcService_PutStream struct {
	drpc.Stream
}

func (x *drpcService_PutStream) SendAndClose(m *Empty) error {
	if err := x.MsgSend(m, drpcEncoding_File_protocol_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCService_DeleteStream interface {
	drpc.Stream
	SendAndClose(*Empty) error
}

type drpcService_DeleteStream struct {
	drpc.Stream
}

func (x *drpcService_DeleteStream) SendAndClose(m *Empty) error {
	if err := x.MsgSend(m, drpcEncoding_File_protocol_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
